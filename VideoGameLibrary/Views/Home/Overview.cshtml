@{
    ViewData["Title"] = "Overview";
}

<p>&nbsp;</p>
<h1>Creating the web app</h1>
<p>&nbsp;</p>
<p>I decided to use ASP.NET Core as I had originally intended to publish the app to a Linux based web server, however as discussed later I decided to go with Azure but Core still fits these needs perfectly.</p>
<p>&nbsp;</p>
<p>I started by setting up a ASP.NET Core 3.0 application with the built in &ldquo;Web Application (Model-View-Controller) as a starting point in Visual Studio 2019. This started me out with a decent base to get started with as it handled some basic needs such as a welcome page and a little bit of bootstrap for formatting. I didn&rsquo;t really intend to change the look of the site as I felt that this test was more to do with the data than the actual theme of how the web app would look so the theming still matches that of the basic web app.</p>
<p>&nbsp;</p>
<p>I went with a MVC approach for this so that I could separate the different aspects of the app yet maintain a loose coupling between these elements, it also helps for some unit testing and to manage the complexity of the app, as it enables aspects to run separately. I added my model class (&ldquo;Game&rdquo;) first with the minimum amount of data I needed just so that I can get the app working. This was created first as I could use Visual Studio to help by Scaffolding it, this would create the needed Controller(&ldquo;GamesController&rdquo;) and Views(&ldquo;Create&rdquo;,&rdquo;Delete&rdquo;,&rdquo;Details&rdquo;,&rdquo;Edit&rdquo;,&rdquo;Index&rdquo;) in a CRUD model. However if I ran the app at this point I would get an error as we don&rsquo;t have a database set up to store the data.</p>
<p>&nbsp;</p>
<h1>Working With A Database</h1>
<p>&nbsp;</p>
<p>Using EF Core Migrations I created a basic database that matched my data model, this also allows me to update the database schema when the data model changes. While developing I used LocalDB as it&rsquo;s a lightweight version of SQL Server Express Database Engine and I have years of experience working with that.</p>
<p>Now that I had a basic database set up I needed some data. I had test data that I had created by using the app but this wasn&rsquo;t enough. I wanted to Seed the database, this will make it so if I start up the app fresh it at least has some test data in. I created a new model with some test data inside. It will also only created data if there are no games already in the DB.</p>
<h1>Search and Flair</h1>
<p>&nbsp;</p>
<p>Now that I had an app up and running with a database to store any data changes. I wanted to add a little bit extra to, I had all the basic requirements (name, platform, genre etc.) but wanted to add a few extra features such as a personal rating system that would let me pick from a pre-defined selection. I added a few new fields and created a search feature on the Index page to search by genre, name or both.</p>
<p>The majority of these changes involved just adding some validation to my fields in order to keep things &ldquo;DRY&rdquo; the validation provided in MVC works extremely well for this, allowing me to just set validation rules in the model. I added a bunch of these in all different shapes and sizes, this includes things like the Genre only allowing letters and each word starting with a capital letter and if incorrect it will give an Error in the UI.</p>
<h1>Calling An API</h1>
<p>&nbsp;</p>
<p>To add a little bit more to the app I decided I would create a call to&nbsp; an API to retrieve more data, this data was retrieved from IGDB (<a href="https://www.igdb.com/discover">IGDB Video Game Database</a>), I wanted to get the aggregated user scores for the games and the description that they supplied. I could have gotten more data such as the images or any data but this was more just to prove it working.</p>
<p>I set up a model to store this new data, then when using the create feature it will go off and call the API using &ldquo;RestSharp&rdquo;. I only picked RestSharp as I originally tested that my API calls worked using Postman and it gives you the code to use with RestSharp in .net, saving me time and effort. Now when a new game is added to the app it will auto fetch the description and the aggregated score, the description can only be seen on the details page.</p>
<p>&nbsp;</p>
<h1>Hosting The App</h1>
<p>&nbsp;</p>
<p>I have more experience working with Azure and deploying in Azure so I scrapped my original idea of deploying to a Linux server I have and using Azure instead. I was using Azure Cloud Shell and got a free license. This allowed me to use PowerShell through my browser to deploy my app. I created a SQL database and deployed the app to Azure. It can be found here with some test data created by myself.</p>
<p><a href="https://jameshynes-playstation-games-library.azurewebsites.net/Games">Playstation Game Library</a></p>